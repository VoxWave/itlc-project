14.5:
    I was bit late to the lecture (10:2x ?) but I was present during most of it. 
    I already have a fuzzy picture of what I want to do for my project 
    (an interpreter).

    I created this repo and file during the 1 hr break. (under 30 mins)

    Notes and ideas during the exercise session: (insert session time)
        - It seems that if a system is minimal then expressing complex things 
          gets messy but if a system is complex then some complex things are 
          expressed much more clearly.
        - Is an actual IRL lambda calculus computer possible and what would it be 
          like? (no not just an interpreter running on a regular computer)
        - I'm going add those basic token now. (14:47)
        - It seems john introduces syntax first but at least a couple of people 
          wanted to approach semantics. and moments later this was addressed :D.
        - woah just had a strong haskell flashback. we have functions and we
          partially apply and we get other functions out.
        - wait where was the plus defined? ah I see. We can just use things but
          they're not part of lambda calculus really. But later on we'll probably
          learn how that could be encoded using lambda calculus so that that plus
          equation can be defined

    I probably wont have time to do much more for today.

15.5 did nothing because of another course.

16.5.
lecture.
excercise session. did ex 1.1 and then coded some more of the lexer.
30 min book from 22:30

17.5.
40 mins of coding the project. 10 minutes at an earlier point of the day and 30 minutes from midnight.

18.5
Arrived to the lecture 10:36 and stayed until the end.
15 mins of coding the project during the break.

13:00-15:53 coded the project during the excercise session.

20.5
Somewhere around 50-55 mins of first adding some tests to the project and then reading the book.

21.5
I arrived to the lecture at 11:00.
Coded tests during the excercise session up until 16:00.

about 15 min of finishing the tests and merging

22.5
arrived 15 minutes late to the lecture.
Did a 52 minute session of coding the project (parser).

23.5
13:53 arrived. 16:56 ended though I had something like a 15 to 20 minute break
somewhere between there.

25.5
reading the book for 26 minutes. I realized I probably haven't been descriptive
enough on what I've been doing so I'll try to elaborate more. I haven't got very
far in the book yet. Just now I got to the recursive definition of lambda calculus.
I'll probably read more later today.

28.5 
57 min of coding overall(a bit of it extended to the next day actually).
main progress:
    - I realized I don't need to buffer up individual tokens because I can use the
      states to store the necessary information for parsing.
      I also brought back the parse_stack but with the token vec removed
      for the same reason as above. the stack is used as memory to know 
      on which subexpression level we are on so that we can form the ast
      as we eat up more tokens.
    - I started to flesh out the normal and lambda states.
      normal is the initial state of the machine and depending on the
      token we move on to other states. I also think that the parser
      will return to normal state when a subexpression begins.
      lamda state just expects an identifier and then moves on to a 
      state that expects a dot or another identifier which will begin
      another lambda expression.
I realized updating the diary and creating the commit probably bumps
the time spent to 1 hr.

Grading of the lecturer:
4?
Not a perfect grade but very good. maybe even somewhere between 4 and 5 if 
using floats instead of integers is allowed.

Pros:
  Explains things very well when he has thought things through.
  Engaged the audience quite well.
  I appreciate the flexibility of the course very much.

Cons:
  Quite often there where he had not thought about a thing as much as he 
  had assumed which resulted in the pacing of the lectures breaking a bit.

  The pacing of the lectures was not though out throughouly since it seemed
  the lectures were almost always behind what he thought should be 
  
  There were mistakes in the slides quite often too. Though this kept the
  audience on their toes. Had the audience been full of more passive people
  this would have been a bigger con.

All in all I think most of the cons result from the course being rather
experimental. I think he's on a track to become a very good lecturer.
