14.5:
    I was bit late to the lecture (10:2x ?) but I was present during most of it. 
    I already have a fuzzy picture of what I want to do for my project 
    (an interpreter).

    I created this repo and file during the 1 hr break. (under 30 mins)

    Notes and ideas during the exercise session: (insert session time)
        - It seems that if a system is minimal then expressing complex things 
          gets messy but if a system is complex then some complex things are 
          expressed much more clearly.
        - Is an actual IRL lambda calculus computer possible and would it be 
          like? (no not just an interpreter running on a regular computer)
        - I'm going add those basic token now. 14:47
        - It seems john introduces syntax first but at least a couple of people 
          wanted to approach semantics. and moments later this was addressed :D.
        - woah just had a strong haskell flashback. we have functions and we
          partially apply and we get other functions out.
        - wait where was the plus defined? ah I see. We can just use things but
          they're not part of lambda calculus really. But later on we'll probably
          learn how that could be encoded using lambda calculus so that that plus
          equation can be